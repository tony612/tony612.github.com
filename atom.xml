<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Echo nil > me]]></title>
  <link href="http://Tony612.github.com/atom.xml" rel="self"/>
  <link href="http://Tony612.github.com/"/>
  <updated>2012-10-30T01:21:49+08:00</updated>
  <id>http://Tony612.github.com/</id>
  <author>
    <name><![CDATA[Tony]]></name>
    <email><![CDATA[h.bing612@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use include for querying to optimize]]></title>
    <link href="http://Tony612.github.com/blog/2012/10/29/use-include-for-querying-to-increase-the-efficiency/"/>
    <updated>2012-10-29T23:06:00+08:00</updated>
    <id>http://Tony612.github.com/blog/2012/10/29/use-include-for-querying-to-increase-the-efficiency</id>
    <content type="html"><![CDATA[<p>今天写项目，然后参考ruby-china的一部分代码的时候，看到一个<code>include</code>的用法，不知道是怎么回事，因为它是用mongodb的，所以也一时找不到<code>ActiveRecord</code>中的用法。</p>

<p>不过刚刚在看railscasts的时候，突然就看到了这种用法:</p>

<p>比如说<code>Task</code>和<code>Project</code>是多对一的关系</p>

<p>在index的页面需要用到<code>Task</code>和它<code>belongs_to</code>的那个<code>Project</code>，这样的话，看log里，会发现，查找了<code>Project</code>了很多次。</p>

<p>那么就能用<code>@tasks = Task.find(:all, :include =&gt; :project)</code>来查到和project关联的task，这样的话可以把相关联的对象也先读取出来。</p>

<p>那么有什么结果呢？</p>

<p>在console的log里就看得很清楚了，载入页面之后，两次查询就够了。</p>

<p>我自己去写的时候，<code>find</code>方法不起作用，不知道是因为这是以前的写法还是怎样。
就看到实战圣经上有说这个的，原来是<code>includes</code>方法，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@events = Event.includes(:user).order('start_date DESC').page(params[:page])</span></code></pre></td></tr></table></div></figure>


<p>这样就能查询到最近的<code>event</code>,并把对应的<code>user</code>包含进去，再进行分页了。顿时感觉世界好美好的有木有！！ 哈哈~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord-ORM of Rails(2)]]></title>
    <link href="http://Tony612.github.com/blog/2012/10/22/activerecord--orm_of_rails/"/>
    <updated>2012-10-22T01:17:00+08:00</updated>
    <id>http://Tony612.github.com/blog/2012/10/22/activerecord&#8211;orm_of_rails</id>
    <content type="html"><![CDATA[<p>这两天重装系统，没做什么事情，装系统现在已经很快了，只是还在做好多的后续工作，回头再写篇总结好了。先写之前剩下的一篇。这次是聊点ActiveRecord的callback。</p>

<h2>Monitor</h2>

<p>ActiveRecord控制model的生命周期，包括他们的CRUD（《Agile..》上很风趣地说是watches sadly as they are destroyed. haha）。</p>

<p>而在这过程中的许多时刻我们都可以通过callbacks来进行一些操作.</p>

<p>ActiveRecord定义了十六个回调函数，十四个是<code>before/after_func</code>的形式，分别在一些函数之前或之后被调用，如<code>destory, validation</code>,两个特别的是after_find以及after_initialize，这两个没有对应的before。</p>

<p>他们的流程如下：
<img src="http://Tony612.github.com/images/callbackactiverecord.png"></p>

<!-- more -->


<p>做个简单的解释，<code>save()</code>会产生两种行为，一种是新产生，一种是更新。而这两种行为可以通过<code>before_validation</code>或<code>after_validation</code>等的方法加上参数<code>on: create</code>或<code>on: update</code>来决定是哪种。</p>

<p>而之前提到的<code>after_find</code>是在任何find操作后会调用，<code>after_initialize</code>则会在一个Active Record的对象产生后调用。我的理解是，比如<code>Model.new()</code>这个只是产生了一个ActiveRecord对象，并没有save，所以调用<code>after_initialize</code>。</p>

<p>怎么用呢？ 我们需要写一个handler和一个与它关联的相应的回调函数。</p>

<p>比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Order &lt; ActiveRecord::Base
</span><span class='line'>  before_validation :normalize_credit_card_number
</span><span class='line'>  after_create do |order|
</span><span class='line'>    logger.info "Order #{order.id} created"
</span><span class='line'>  end
</span><span class='line'>  protected
</span><span class='line'>  def normalize_credit_card_number
</span><span class='line'>    self.cc_number.gsub!(/[-\s]/, '')
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>在<code>before_validation normalize_credit_card_number</code>中声明了一个handler并把它关联到<code>before_validation</code>这个事件中。然后再定义一个函数就行，这个函数最好是private或protected的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord--ORM of Rails(1)]]></title>
    <link href="http://Tony612.github.com/blog/2012/10/17/activerecord-orm-of-rails/"/>
    <updated>2012-10-17T23:07:00+08:00</updated>
    <id>http://Tony612.github.com/blog/2012/10/17/activerecord-orm-of-rails</id>
    <content type="html"><![CDATA[<p>最近在看ihower的实战圣经，白天不能上网的话就看《Agile Web Development with rails》的后半部分，又看了railscasts开始几集，正好都讲到了ActiveRecord,也就是rails里MVC的model部分，就索性做个总结。</p>

<h2>ORM</h2>

<p>ActiveRecord是rails定义的一个类，是rails的ORM，很强大。</p>

<p>ORM(Object-relational mappiing)，用我自己的话来说，就是建立在数据库与web程序之间的一种抽象机制，把关系行数据库的表和程序中的对象建立关系，简化了对于数据库的操作，起到了极大的简化作用。而这种抽象与简化对于那些SQL用的不是很熟练的人，对于开发web应用有很好的方便，可以不过多关注底层的sql，而专注于web应用本身。而有些人可能会比较反对这种机制，因为效率或是其他原因。</p>

<p>而Joel Spolsky有个抽象渗漏法则，就是说</p>

<blockquote><p>所有重大的抽象机制在某种程度上说都是有漏洞的。比如C语言简化了组合语言的繁杂，ruby简化了C，TCP简化了IP，而他们又都有一些缺陷，而他们的实现里又都会混入一些后者，来达到效率等目的。</p></blockquote>

<p>但是，取舍在于这种抽象能带来更大的好处，比如开发时间的缩短或是怎样。比如，学习ruby、rails这些时间，确实感觉到了它们的快速和方便，虽然听说效率可能不及C或java，但是他们带来的时间的节省以及带给程序员的快乐是很大的，我觉得这些原因就足够了。</p>

<!-- More -->


<h2>Dynamic Find</h2>

<p>查询是数据库操作很重要的一部分，ActiveRecord有first、last、all、find、where，以及limit、order、offset、select、group等方法。</p>

<p>这里就主要说一些其中的Find，因为有ruby里动态方法，所以显得很神奇和强大。</p>

<p>find单独用的话，可以直接传入id，如<code>c = Order.find(1)</code>来得到表的一行数据，然后经过rails处理，变为ruby的某个类型的对象。railscasts里说还可以传入参数，进行查询，不过查了其他资料，没见到用的，可能是rails3取消了，统一用动态方法了？</p>

<p>还有<code>find\_by\_sql("...")</code>，可以把sql语句传进去进行查询。</p>

<p>好了，说动态方法，其实是把要查询的条件直接作为方法名来使用。这里举几个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User.find_by_first_name('Jack')    #根据first_name这个属性来找到first_name为Jack的User，而且这里默认是first（第一个）
</span><span class='line'>User.find_all_by_first_name('Jack')   #这里则是找到所有叫Jack的人
</span><span class='line'>User.find_last_by_first_name('Jack')  #找到最后一个满足条件的
</span><span class='line'>User.find_by_first_name_and_locked("Jack", true)  #这里则传入了两个参数</span></code></pre></td></tr></table></div></figure>


<p>这里可以把任何属性名放到by后边（多个词的话就要用&#8217;_&#8217;隔开），有点magic的感觉，其实都是因为ruby的Metaprogramming（元编程）的原因。先不说，因为还要多差点资料 ：）。</p>

<h2>Scope</h2>

<p>这其实是很酷的东西，可以让查询变得很灵活，代码看起来也很简洁，之前看angle_nest的代码，看到model中的scope就惊艳了，这么好的东西以前居然不知道的。
它最帅的，就是可以把几个单独的小一点的查询连起来，以及指尖的相互组合查询。如(来自ihower)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Event &lt; ActiveRecord::Base
</span><span class='line'>    scope :public, where( :is_public =&gt; true )
</span><span class='line'>    scope :recent_three_days, where(["created_at &gt; ? ", Time.now - 3.days ])
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>      Event.create( :name =&gt; "public event", :is_public =&gt; true )
</span><span class='line'>      Event.create( :name =&gt; "private event", :is_public =&gt; false )
</span><span class='line'>      Event.create( :name =&gt; "private event", :is_public =&gt; true )
</span><span class='line'>
</span><span class='line'>      Event.public
</span><span class='line'>      Event.public.recent_three_days</span></code></pre></td></tr></table></div></figure>


<p>还可以传入参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Event &lt; ActiveRecord::Base
</span><span class='line'>    scope :recent, lambda{ |date| where(["created_at &gt; ? ", date ]) } 
</span><span class='line'>    # 或 scope :recent, Proc.new{ |t| where(["created_at &gt; ? ", t ]) }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>    Event.recent( Time.now - 7.days )</span></code></pre></td></tr></table></div></figure>


<p>这里是可以查询到最近多久的Event。
不过这里，ihower和guides里都推荐换成这种形式，可读性比较强：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Event &lt; ActiveRecord::Base
</span><span class='line'>    def self.recent(t=Time.now)
</span><span class='line'>        where(["created_at &gt; ? ", t ])
</span><span class='line'>    end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Event.recent( Time.now - 7.days )</span></code></pre></td></tr></table></div></figure>


<p>这种也可以和其他Scope连在一起使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's the result of n << n?]]></title>
    <link href="http://Tony612.github.com/blog/2012/09/25/whats-the-result-of-n-n/"/>
    <updated>2012-09-25T00:50:00+08:00</updated>
    <id>http://Tony612.github.com/blog/2012/09/25/whats-the-result-of-n-n</id>
    <content type="html"><![CDATA[<p>昨天在ruby-china上看到关于ruby的一个很有意思的问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>n = [1, 2]
</span><span class='line'>a = n &lt;&lt; n
</span><span class='line'>p a
</span><span class='line'>=&gt; [1, 2, [...]]
</span><span class='line'>a[2]
</span><span class='line'>=&gt; [1, 2, [...]]</span></code></pre></td></tr></table></div></figure>


<p>这是一个无限嵌套的数组，数组允许嵌套，这很正常，不过为什么会出现无限嵌套呢？
好多人给出了各式的答案，还提到了用direct graph去表示递归数组的<a href="http://stackoverflow.com/questions/10606734/what-are-recursive-arrays-good-for">stackoverflow的一个问题</a>
就是用有向图去表示了一个&lt;&lt;的过程，不过感觉还是没解释这个的原因。</p>

<h3>&lt;&lt;</h3>

<p>先从<code>&lt;&lt;</code>符号说起，这是一个ruby上用的很多的符号，大概表示append或push的意思，可以用于String，Array等等的类型，甚至是非这些基础类，比如rails里的1-n的关系中就有用到。</p>

<h3>object_id</h3>

<p>在解释之前要先说一下<code>object_id</code>，这个有点想C++或java里的对象的地址，简单来说就是唯一标识对象的。
在irb里，可以看到<code>[1, 2] &lt;&lt; [1, 2]</code>这个的结果是和我们预期的一样的：<code>[1, 2, [1, 2]]</code>，而查看<code>[1, 2]</code>的<code>object_id</code>，会发现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p194 :005 &gt; [1, 2].object_id
</span><span class='line'> =&gt; 84087500 
</span><span class='line'>1.9.3p194 :006 &gt; [1, 2].object_id
</span><span class='line'> =&gt; 84084000 
</span><span class='line'>1.9.3p194 :007 &gt; [1, 2].object_id
</span><span class='line'> =&gt; 84104730 
</span></code></pre></td></tr></table></div></figure>


<!-- More -->


<p>也就是说，看似一样的前后的<code>[1, 2]</code>其实并不一样，也就是说两个不同的对象（object_id），比如<code>a</code>和<code>b</code>，<code>a &lt;&lt; b</code>所得到的结果是正常的。
而<code>n &lt;&lt; n</code>的结果为什么有点出乎意料呢？</p>

<h3>My explanation</h3>

<p>在我看来这应该只是Matz做的一个约定或他对于这种情况——<code>&lt;&lt;</code>作用于自身——的解释和理解吧。
而我的解释是这样的，在<code>&lt;&lt;</code>右边的<code>n</code>作用于左边的<code>n</code>时，左边的<code>n</code>就发生了变化，变成了<code>[1, 2, [1, 2]]</code>，到这里还是很正常的。</p>

<p>但是，问题来了，加入把这个过程放慢的话，左边的<code>n</code>发生了变化，右边的<code>n</code>也要发生变化啊，所以右边的<code>n</code>就也变成了<code>[1, 2, [1, 2]]</code>。
但还没完，右边的<code>n</code>正在作用于左边的<code>n</code>，所以左边的<code>n</code>其实就又成了<code>[1, 2, [1, 2, [1, 2]]]</code>.</p>

<p>如此下去，是没完没了了，所以就变成了无限的嵌套数组，无限的递归下去了。这里应该也可以报错的吧，不过Matz还是选择了用<code>[...]</code>来代表无限的递归嵌套。</p>

<p>Hash也是可以有这样的结果的（来自@hooopo）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p194 :032 &gt; a = {:a =&gt; 1}
</span><span class='line'> =&gt; {:a=&gt;1} 
</span><span class='line'>1.9.3p194 :033 &gt; a[:b] =  a
</span><span class='line'> =&gt; {:a=&gt;1, :b=&gt;{...}} </span></code></pre></td></tr></table></div></figure>


<p>应该是因为Array和Hash允许嵌套的形式，所以会出现这种情况，换种类型就不一定了，比如String：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p194 :023 &gt; n = "abc"
</span><span class='line'> =&gt; "abc" 
</span><span class='line'>1.9.3p194 :024 &gt; n &lt;&lt; n
</span><span class='line'>=&gt; "abcabc"</span></code></pre></td></tr></table></div></figure>


<p>当然，这仅仅是个人对于ruby里这样的结果的一个思考和猜想，至于真正原因，恐怕还要问Matz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using map method in a incredibly elegant way]]></title>
    <link href="http://Tony612.github.com/blog/2012/09/22/change-many-string-objects-to-integer-type-in-a-awesome-way/"/>
    <updated>2012-09-22T01:38:00+08:00</updated>
    <id>http://Tony612.github.com/blog/2012/09/22/change-many-string-objects-to-integer-type-in-a-awesome-way</id>
    <content type="html"><![CDATA[<p>今天在写最近的项目的时候，遇到一个问题，本来是想等这个项目完了之后，把学到的一些一起写出来，不过觉得那时应该会工作量比较大，也比较拥挤。
问题是，需要把多个参数转换为一个integer，然后再-1，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foo1, foo2, too3 ... = foo1.to_i - 1, foo2.to_i - 1, foo3.to_i -1 ...</span></code></pre></td></tr></table></div></figure>


<p>如果变量一多，就会很麻烦，要重复写好多（我那里是8个，用了三大行才写下），就去ruby-china上求助，然后很快得到回复，然后得到了一种很漂亮的方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[foo1, foo2, foo3].map(&:to_i).map(&:pred)</span></code></pre></td></tr></table></div></figure>


<p>这真算是种一看就亮了的方法吧，<strong>awesome</strong></p>

<h2>map</h2>

<p>map的话，确实因为ruby用的不熟，还没想到去用，而且也没考虑要把他们作为一个数组来对待，这其实就是说明一堆没有规律的数据堆在一起，不管操作还是干嘛都很不方便。
所以这里用数组组织起来确实是很合适的，当然，这样直接赋值后的话，还并没有改变那几个变量本身，不过还是可以把结果保存在一个数组中来用的。</p>

<h2>&amp;:symbol</h2>

<p>最cool的应该是这个吧，看上去是挺容易看懂，就是把每次迭代器的参数对它自身调用<code>to_i</code>方法，并连续调用map。
不过详细解释的话，还是去搜了一下,就在<a href="http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby">stackoverflow的一个问题</a>里看到了相关话题。
那个被采用的回答里提到</p>

<blockquote><p>It&#8217;s shorthand for tags.map(&amp;:name.to_proc).join(&#8217; &#8216;)</p>

<p>If foo is an object with a to_proc method, then you can pass it to a method as &amp;foo, which will call foo.to_proc and use that as the method&#8217;s block.</p></blockquote>

<!-- More -->


<p>然后参考这个网站，著名的<a href="http://pragdave.pragprog.com/pragdave/2005/11/symbolto_proc.html">Dave Thomas的网站</a></p>

<blockquote><p>When you say names.map(&amp;xxx), you’re telling Ruby to pass the Proc object in xxx to map as a block.</p>

<p>If xxx isn’t already a Proc object, Ruby tries to coerce it into one by sending it a to_proc message.</p></blockquote>

<p>这段就是说<strong>一个对象<code>bar</code>，如果本身是一个<code>Proc</code>，就把它传到<code>map</code>中，如果有一个<code>to_proc</code>方法，那么就调用<code>bar.to_proc</code>，并把这个转换成的<code>Proc</code>对象传入<code>map</code>中</strong>。</p>

<h2>Symbol and Proc</h2>

<p>去查一下ruby的api关于<a href="http://www.ruby-doc.org/core-1.9.3/Symbol.html#method-i-to_proc">Symbol类的to_proc方法</a>
就会知道对于一个Symbol的对象，比如这里的<code>:to_i</code>前边加上<code>&amp;</code>，其实就是调用了它的<code>to_proc</code>方法而成为Proc的对象，并传给<code>map</code>这个迭代器。
<code>Symbol#to_proc</code>的代码像这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def to_proc
</span><span class='line'>  proc { |obj, *args| obj.send(self, *args) }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>上边的代码中<code>send</code>是<code>Object</code>类中定义的，就像这样<code>send(symbol [, args...]) → obj</code>，其实就是调用了obj的名字叫“symbol”的方法。
在把上述这个proc对象传到map迭代器之后，每次迭代的数组中的一个值就相当于是<code>to_proc</code>方法中的<code>obj</code>对象，然后就对它调用<code>to_i</code>方法，就可以了。</p>

<h2>Summary</h2>

<p>这应该已经涉及到了元编程的动态调用方法和一些闭包的内容了，真是博大精深啊。
正如Dave Thomas那篇文章最后说的</p>

<blockquote><p>It’s an incredibly elegant use of coercion and of closures.</p></blockquote>

<p>PS：其实那篇是很久前写的，他提到了<a href="http://extensions.rubyforge.org/rdoc/index.html">Ruby Extensions Project</a>
不过现在ruby里已经把Symbol的这个方法添加进去了，而那本《Programming ruby》（379页）里也有和这篇博文差不多的一个叙述。
这本书里又说到了，这种方式可能会造成效率的下降，不过一般的程序，还是可以用的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing the archlinux OS]]></title>
    <link href="http://Tony612.github.com/blog/2012/09/21/installing-the-archlinux-os/"/>
    <updated>2012-09-21T01:43:00+08:00</updated>
    <id>http://Tony612.github.com/blog/2012/09/21/installing-the-archlinux-os</id>
    <content type="html"><![CDATA[<p>参考自：老手看<a href="https://wiki.archlinux.org/index.php/Installation_Guide">这个</a>, <a href="https://wiki.archlinux.org/index.php/Beginners%27_Guide">新手教程</a></p>

<p>这个guides还是很细致的，不过就怕遇到一些莫名的问题就不好了。以及一些不符合自己电脑的东西</p>

<p>虽然在忙个rails的项目，不过还是抽了个空来搞一下一直想玩的arch，也当是从rails里切换出来，放松一下吧。</p>

<p>安装archlinux，版本是2012.09.07（好新～)</p>

<p>PS:其实还是有一段惨痛的波折的，本来是想在已有windows xp和ubuntu双系统的情况下，把ubuntu换成arch的，不过因为有一些原因导致安装不成功，最后不得不砍掉window，来拥抱arch了，不过也好，其实也都不用windows</p>

<h3>下载</h3>

<p>首先当然是下载了，可以从这里下载，官方推荐用BitTorrent下载，但我这里几乎不能下载，就找到了国内的镜像，挨个点开，比较了一下，当时属北交的最快，十几分钟就搞定了。 当然，下载完了最好检查一下文件的完整性，用sha1sum archlinux-2012.XX.XX-XXXX.iso或md5sum archlinux-2012.XX.XX-XXXX.iso，会得到一个类似于这样的码<code>fa01ac8b4186c17cf7725e24c62c0e1891fcacc0 archlinux-2012.09.07-dual.iso</code>，然后和刚刚下载镜像的那个网站中的sha1sum或md5sum文件中的内容做对比看是不是一样的。</p>

<!-- More -->


<h3>U盘启动</h3>

<p>然后就是做启动咯，选U盘的理由。。不解释了。 ：） 把U盘插上后，用lsblk来检测看时候U盘已经没有挂载，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>NAME MAJ:MIN RM SIZE RO MOUNTPOINT sda 8:0 0 465.8G 0 ├─sda1 8:1 0 200M 0 ├─sda2 8:2 0 48.8G 0 ├─sda3 8:3 0 1K 0 ├─sda5 8:5 0 61G 0 ├─sda6 8:6 0 150G 0 ├─sda7 8:7 0 166.8G 0 ├─sda8 8:8 0 14.5G 0 / ├─sda9 8:9 0 991M 0 [SWAP] └─sda10 8:10 0 23.6G 0 /home sr0 11:0 1 1024M 0 sdb 8:16 1 3.7G 0 └─sdb1 8:17 1 3.5G 0 /media/F40B-4DFF
</span></code></pre></td></tr></table></div></figure>


<p>其中MOUNTPOINT自然就是挂在点，这里的话sdb1是挂载的，然后因为要用到sdb（U盘所在），所以要保证它是不挂载的，这里貌似就是不挂载的，不过这里我为了安全起见，又把sdb1给取消了挂载，用<code>umount /dev/sdb1</code>。 另外说一下，那个树型结构是表示一种依赖关系的。 然后用<code>dd if=archlinux-2012.09.07-dual.iso of=/dev/sdb</code>（注意是sdb，不是sdb1，if应该是input file的意思），就能够把镜像写入U盘了，当然这是要覆盖U盘的。其他方法，以及在OS X和Windows上的方法见这里</p>

<p>到这里准备工作就做好了，然后就是正式的安装。</p>

<p>启动安装程序</p>

<p>把U盘插入电脑，开机或重启，在开始的界面按F12或其他的键，改变BIOS，选择USB XXXXX，然后就看到archlinux的字样了（很激动的有木有），选择Boot Arch Linux 然后经过一个系统的启动（有点像windows的PE系统），一些加载中的命令，正常的话就进入archlinux的文字界面，并且默认root登录，到这里还只是进入了系统，不过安装还没结束</p>

<h3>安装</h3>

<p>上边一切顺利的话就是archlinux的命令行界面了。。因为archlinux是很简洁主义的，所以要自己去配置安装好多东西。开始吧。 键盘不用搞，略过。。</p>

<h3>网络</h3>

<p>安装程序会自动配置有线链接，不过还是先ping一下看是否成功，比如ping -c 3 www.google.com，如果出现ping: unknown host，就是不通，要手动配置。（开始不行，然后准备往下走的时候想起来没插网线，晕～～） 因为懒得去配无线（这里要用无线的话还要另外配置，参考这里,当然即使这里配好了，安完后还是要再配置了无线才能用的，所以就不配咯。。）</p>

<h3>准备硬盘</h3>

<p>终于到这比较关键的部门了。。一些重要的数据最好先备份，都懂的。。</p>

<p>这里本来想用那个据说是比MBR优越一些的GPT，见这里</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Note: If you are not dual booting with Windows, then it is advisable to use GPT instead of MBR. GPT partitioning can only be done with gdisk orparted. Read GPT for the list of advantages.
</span></code></pre></td></tr></table></div></figure>


<p><strong>PS:不过这个就有点坑爹了，我照着这个来，结果最后都弄完了，一直开不了机，等删了windows才发觉，应该是选MBR的吧。不过因为我也没有再在双系统下试验，不知道在装了windows的情况下，选MBR是否可行，应该可以吧 ：）</strong></p>

<p>于是在尝试了N次之后，就乖乖地单系统了，用cfdisk，比gdisk好用多了。</p>

<p>然后就按照提示，建立不同的分区，注意把<code>boot</code>的分区加上Boot的flag，以及把swap设为<code>Linux swap / Solaris</code>，最好把分区对应的/dev/sdaX抄下来，后边会用到</p>

<p>说一下分区方案，仅供参考：200M的/boot，20G的/，1G的swap，10G的/var, 剩下有100多G都是/home的</p>

<p>然后确定没问题了就w写入了。</p>

<p>还要按照下边设定文件系统，注意swap的，boot也可以是ext4，不过据说ext2会好一点</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># mkfs.ext2 /dev/sdaX(boot)
</span><span class='line'># mkfs.ext4 /dev/sdaX
</span><span class='line'># mkfs.ext4 /dev/sdaX
</span><span class='line'>Swap：
</span><span class='line'># mkswap /dev/sdaX
</span><span class='line'># swapon /dev/sdaX</span></code></pre></td></tr></table></div></figure>


<h3>挂载</h3>

<p>linux的常识性东西了，用<code>mount /dev/sdaX /mnt</code>之类的去挂载，/mnt为/</p>

<p>boot，home，vara以及其他所有都要用如下方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># mkdir /mnt/boot
</span><span class='line'># mount /dev/sdaX /mnt/boot</span></code></pre></td></tr></table></div></figure>


<h3>选择镜像</h3>

<p>编辑mirrorlist，来使快一点的镜像在上边。推荐用北交（njtu）或中科大（ustc）的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># nano /etc/pacman.d/mirrorlist
</span></code></pre></td></tr></table></div></figure>


<p>用<code>Alt+6</code>去复制整行，用<code>Ctrl+U</code>去粘贴</p>

<h3>安装一些基础的程序</h3>

<p>这里要安装一些基础的程序，base 和 base-devel，因为我下边想用vim,就多加了vim，当然i这里需要把网络配好</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># pacstrap /mnt base base-devel vim
</span></code></pre></td></tr></table></div></figure>


<h3>生成fstab</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># genfstab -p /mnt &gt;&gt; /mnt/etc/fstab</span></code></pre></td></tr></table></div></figure>


<h3>Chroot并配置基本环境</h3>

<p>这里就相当于要进入安装到硬盘上的环境进行操作，现在所处的环境还是用USB启动起来的一个内存中的环境（但是USB是拔不得的）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># arch-chroot /mnt</span></code></pre></td></tr></table></div></figure>


<p>然后下边进行一下比如键盘，区域，时间的配置，具体参考最上边的链接。</p>

<h4>Install and configure a bootloader</h4>

<p>然后是很重要的和启动有关的部分了，能不能启动起来和这个有很大关系。</p>

<p>我是BIOS的，以下也都是BIOS的，而且用了GRUB，因为这个比较熟悉。。</p>

<p>安装GRUB</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># pacman -S grub-bios
</span><span class='line'># grub-install --target=i386-pc --recheck /dev/sda
</span><span class='line'># cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo</span></code></pre></td></tr></table></div></figure>


<p>配置GRUB，这里用了自动生成，还可以安装<code>os-prober</code>来自动检测系统，双系统的话很有用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># pacman -S os-prober
</span><span class='line'># grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure>


<h4>设置密码</h4>

<p>用这个命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>passwd
</span></code></pre></td></tr></table></div></figure>


<h4>退出</h4>

<p>退出这个chroot的环境</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>exit
</span></code></pre></td></tr></table></div></figure>


<h3>umount 并重启</h3>

<p>然后要umount那些设备</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'># umount  /mnt/{boot,home,var,a}
</span><span class='line'>
</span><span class='line'># reboot
</span></code></pre></td></tr></table></div></figure>


<p>终于结束了，如果正常的话重启之后就进入grub的引导了，可以选择安装的系统。</p>

<p>当然arch是需要去配置很多东西的，这里就先不说了，下次吧。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS GoodPart: Object]]></title>
    <link href="http://Tony612.github.com/blog/2012/09/17/js-goodpart-object/"/>
    <updated>2012-09-17T03:03:00+08:00</updated>
    <id>http://Tony612.github.com/blog/2012/09/17/js-goodpart-object</id>
    <content type="html"><![CDATA[<p>javsctipt 简单类型包括数字、字符串、boolean、null和undefined，其余都是对象（<strong>和Ruby不同</strong>）</p>

<p>是可变的键控集合（keyed collections）</p>

<h2>对象字面量</h2>

<p>一个对象字面量就是在一对花括号中的0或多个“键/值”对</p>

<p><strong>对象是属性的容器</strong>，每个属性有<strong>名字和值</strong>，属性名可选择是否用<strong>双引号</strong>括起来</p>

<h2>检索</h2>

<ol>
<li>【】+字符串</li>
<li>foo.bar （优先）</li>
</ol>


<p>不存在时返回<strong>undefined</strong></p>

<ul>
<li>用||来赋默认值</li>
<li>用&amp;&amp;来避免undefined错误</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var middle = stooge["middle-name"] || "(none)";
</span><span class='line'>var status = flight.status || "unknown";
</span><span class='line'>flight.equipment // undefined
</span><span class='line'>flight.equipment.model // throw "TypeError"
</span><span class='line'>flight.equipment && flight.equipment.model // undefined</span></code></pre></td></tr></table></div></figure>


<!-- More -->


<h2>赋值</h2>

<h4><strong><em>PS： 如果属性不存在，该属性就被加入对象到属性中去</em></strong></h4>

<h2>引用</h2>

<p>对象通过引用来传递，<strong><em>他们永远不会被拷贝</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var x = stooge;
</span><span class='line'>x.nickname = 'Curly';
</span><span class='line'>var nick = stooge.nickname;
</span><span class='line'>// nick is 'Curly' because x and stooge
</span><span class='line'>// are references to the same object
</span><span class='line'>var a = {}, b = {}, c = {};
</span><span class='line'>// a, b, and c each refer to a
</span><span class='line'>// different empty object
</span><span class='line'>a = b = c = {};
</span><span class='line'>// a, b, and c all refer to
</span><span class='line'>// the same empty object</span></code></pre></td></tr></table></div></figure>


<h2>原型（prototype）</h2>

<p>每个对象都链接到一个原型，并从中继承属性，通过字面量创建的原型为<code>Object.prototype</code></p>

<h4>原型链 委托（delegation）</h4>

<p> 只有检索时才会用到。沿原型链寻找，直到到达<code>Object.prototype</code>，否则结果为undefined</p>

<p>这是种动态关系，当添加新属性到原型中，该属性会对此对象可见。</p>

<h2>反射Reflection</h2>

<p>用typeof来得到属性的类型</p>

<p><strong><em>PS：对原型链的属性也会有作用</em></strong></p>

<p>两个方法处理不需要的属性</p>

<ol>
<li><p>让程序检查并去掉函数的类型，因为一般来说做反射的目标是数据。</p></li>
<li><p>用<code>hasOwnProperty()</code>方法，不检查原型链的。</p></li>
</ol>


<h2>枚举Enumeration</h2>

<p>用for in来遍历，这会列出所有属性，因此有必要过滤掉不需要的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var name;
</span><span class='line'>for (name in another_stooge) {
</span><span class='line'>if (typeof another_stooge[name] !== 'function') {
</span><span class='line'>document.writeln(name + ': ' + another_stooge[name]);
</span><span class='line'>}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><strong><em>属性名出现的顺序是不确定的！！如果要确保以特定顺序出现，最好的方法就是完全避免使用for in，而是创建一个数组</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var i;
</span><span class='line'>var properties = [
</span><span class='line'>'first-name',
</span><span class='line'>'middle-name',
</span><span class='line'>'last-name',
</span><span class='line'>'profession'
</span><span class='line'>];
</span><span class='line'>for (i = 0; i &lt; properties.length; i += 1) {
</span><span class='line'>document.writeln(properties[i] + ': ' +
</span><span class='line'>another_stooge[properties[i]]);
</span><span class='line'>}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>删除</h2>

<p>delete可以删除对象中的属性，而不会删除prototype链中的。</p>

<p><strong>PS：删除对象中的属性之后，可能会让原型链中的属性浮现出来</strong></p>

<h2>减少全局变量污染Global Abatement</h2>

<p>javascript可以很随意定义全局变量，<strong>不过它削弱了程序的灵活性，应该避免</strong></p>

<p>最小化使用全局变量的一个方法是在应用中只创建唯一一个全局变量，此变量就变成应用的容器</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var MYAPP = {};
</span><span class='line'>MYAPP.stooge = {
</span><span class='line'>"first-name": "Joe",
</span><span class='line'>"last-name": "Howard"
</span><span class='line'>};
</span><span class='line'>MYAPP.flight = {
</span><span class='line'>airline: "Oceanic",
</span><span class='line'>number: 815,
</span><span class='line'>departure: {
</span><span class='line'>IATA: "SYD",
</span><span class='line'>time: "2004-09-22 14:55",
</span><span class='line'>city: "Sydney"
</span><span class='line'>},
</span><span class='line'>arrival: {
</span><span class='line'>IATA: "LAX",
</span><span class='line'>time: "2004-09-23 10:42",
</span><span class='line'>city: "Los Angeles"
</span><span class='line'>}
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>可以有效地把多个全局变量整理在一个命名空间下（这里<code>MYAPP</code>就起到命名空间的作用），可以更容易和其他程序整合，也更易读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello! ]]></title>
    <link href="http://Tony612.github.com/blog/2012/09/03/hello/"/>
    <updated>2012-09-03T00:39:00+08:00</updated>
    <id>http://Tony612.github.com/blog/2012/09/03/hello</id>
    <content type="html"><![CDATA[<p>关于新的博客</p>

<p>早就想搞个技术博客了，之前也写过个RoR的，不过感觉写的不太好，而且又被大作业耽搁了，再加上主机的事，就显得比较麻烦。而这个月又有一些网站，和一些学习的内容，
最近看到用好多用github来写的，觉得挺棒的，很方便，而且很hack的方法，于是我也来试试咯。等更完善的blog engine写出来，并且搞定主机之后，再用自己的去搭吧，现在
还是一切从简。</p>

<p>博客的名字也是早就想好的，用shell的一个挺漂亮的echo命令和ruby里的nil来构成，也很hack，哈哈</p>

<p>博客的搭建，参见<a href="http://octopress.org/">octopress</a>，不知道这个名字是怎么取的，不过和wordpress有点像的感觉，是用来表示博客相关的吧，大概。</p>

<p>基本上按照上边网站的指示来搭建就行，当然也可以选择在heroku或是Rsync(第一次听到这个)。不过也有一些问题,主要是在改动_config.yml来进行配置后，先push到remote
那边，结果网页显示不变，看了github上的代码，是有改动的。google之后知道，是因为还要执行<code>rake setup_github_pages</code>来进行初始化deploy，再进行<code>rake deploy</code>就
可以了。</p>

<p>最后就是，发现现在换的这个Terminal <a href="http://guake.org/">Guake</a>对中文的显示感觉挺好的，而且挺漂亮，对vim的color-scheme的显示也会比自带的terminal要好一点，当然也有点不足，比如在vim下
不能用触摸板像操纵滚动条一样调整光标的上下位置，而且没有直接启动的快捷键。不过整体还好，反应速度也不错。</p>

<p>还有就是，twitter上不去了，用GAE的方法也不行，因为它像Github一样加了ssh吧，倒是安全了一些，哎，还是赶快搞个vps吧。</p>
]]></content>
  </entry>
  
</feed>
